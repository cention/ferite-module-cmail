/**
 * @namespace Mail
 * @modifies  Mail
 */
namespace modifies Mail {
	/**
	 * @namespace Mime
	 * @brief     The mime types
	 */ 
	namespace Mime {
		/**
		 * @variable TYPETEXT
		 * @type     number
		 * @brief    unformatted text
		 * @static
		 */
		final number  TYPETEXT = 0;               /* unformatted text */
		/**
		 * @variable TYPEMULTIPART
		 * @type     number
		 * @brief    multipart message
		 * @static
		 */
		final number  TYPEMULTIPART = 1;          /* multiple part */
		/**
		 * @variable TYPEMESSAGE
		 * @type     number
		 * @brief    Encapsulated message
		 * @static
		 */
		final number  TYPEMESSAGE = 2;            /* encapsulated message */
		/**
		 * @variable TYPEAPPLICATION
		 * @type     number
		 * @brief    Application
		 * @static
		 */
		final number  TYPEAPPLICATION = 3;        /* application */
		/**
		 * @variable TYPEAUDIO
		 * @type     number
		 * @brief    Audio
		 * @static
		 */
		final number  TYPEAUDIO = 4;              /* audio */
		/**
		 * @variable TYPEIMAGE
		 * @type     number
		 * @brief    Image
		 * @static
		 */
		final number  TYPEIMAGE = 5;              /* static image */
		/**
		 * @variable TYPEVIDEO
		 * @type     number
		 * @brief    Video
		 * @static
		 */
		final number  TYPEVIDEO = 6;              /* video */
		/**
		 * @variable TYPEMODEL
		 * @type     number
		 * @brief    Model
		 * @static
		 */
		final number  TYPEMODEL = 7;              /* model */
		/**
		 * @variable TYPEOTHER
		 * @type     number
		 * @brief    Another type
		 * @static
		 */
		final number  TYPEOTHER = 8;              /* unknown */
		/**
		 * @variable TYPEMAX
		 * @type     number
		 * @brief    Max type code
		 * @static
		 */
		final number  TYPEMAX = 15;               /* maximum type code */

		/**
		 * @function toString
		 * @declaration function toString(number i )
		 * @brief Convert a given numerical mimetype to a string
		 * @param number i The mime type id
		 * @return The mimetype or an empty string
		 */
		function toString(number i ) {
			switch(i) {
				case 0: return "text";
				case 3: return "application";
				case 4: return "audio";
				case 5: return "image";
				case 6: return "video";
				case 7: return "model";
				default: return "";
			}
		}
		function fromString( string type ) {
			switch( type.toLower() ) {
				case 'text':        return Mail.Mime.TYPETEXT;
				case 'application': return Mail.Mime.TYPEAPPLICATION;
				case 'audio':       return Mail.Mime.TYPEAUDIO;
				case 'image':       return Mail.Mime.TYPEIMAGE;
				case 'video':       return Mail.Mime.TYPEVIDEO;
				default:            return Mail.Mime.TYPEOTHER;
			}
		}
	}
	/**
	 * @end
	 */
	/**
	 * @namespace Encoding
	 * @brief     Encoding types
	 */
	namespace Encoding{
		/**
		 * @variable ENC7BIT
		 * @type     number
		 * @brief    7 bit SMTP semantic data
		 * @static
		 */
		final number  ENC7BIT = 0;                /* 7 bit SMTP semantic data */
		/**
		 * @variable ENC8BIT
		 * @type     number
		 * @brief    8 bit SMTP semantic data
		 * @static
		 */
		final number  ENC8BIT = 1;                /* 8 bit SMTP semantic data */
		/**
		 * @variable ENCBINARY
		 * @type     number
		 * @brief    8 bit binary data
		 * @static
		 */
		final number  ENCBINARY = 2;              /* 8 bit binary data */
		/**
		 * @variable ENCBASE64
		 * @type     number
		 * @brief    Base64 Encoding
		 * @static
		 */
		final number  ENCBASE64 = 3;              /* base-64 encoded data */
		/**
		 * @variable ENCQUOTEDPRINTABLE
		 * @type     number
		 * @brief    Quoted Printable Encoding
		 * @static
		 */
		final number  ENCQUOTEDPRINTABLE = 4;     /* human-readable 8-as-7 bit data */
		/**
		 * @variable ENCOTHER
		 * @type     number
		 * @brief    Other type of encoding
		 * @static
		 */
		final number  ENCOTHER = 5;               /* unknown */
		/**
		 * @variable ENCMAX
		 * @type     number
		 * @brief    Maximum encoding code
		 * @static
		 */
		final number  ENCMAX = 10;                /* maximum encoding code */
	}
	/**
	 * @end
	 */
}
/**
 * @end
 */